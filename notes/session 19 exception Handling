Exception Handling:
 Statement from Group:
      1. provide custom message if application or program breaks.

Use case: Online shopping site with proper exception handling will avoid loss to both customer as well as firm.

Exception: Unexpected termination of program giving undesired results.

Exception Heirarchy:
                Throwable(its a class)
                   |
           |-------------------|
 Checked Exception           Errors
           |
   Unchecked Exceptions                            |


Checked Exceptions:
     1. This exceptions will extends Exception class.
     2. During Compile time of program, the compiler will say you have to handle the exception.
     Ex: ClassNotFoundException, IOException, FileNotFoundException.

Uncehcked Exceptions:
    1. This exceptions will extends RuntimeException class.
    2. During the program runtime, we will get unchecked exceptions.
    EX: NullpointerException, IllegalArgumentException, NumberFormatException, ArrayIndexOutOfBoundsException


Errors:
  Errors represent serious and irrecoverable conditions like inifinite recursions , memory leaks.
EX: StackOverflowError, OutOfMemoryError.

StackOverflowError:
     If your stack size keep on increasing and never terminated then we will see stackoverflow error.

outOfMemoryError:
   If the JVM heapsize keeps on growing by allocation memory to the variables then after reaching particular threshold value,
   the JVM cant allocate memory further resulting in OutOfMemoryError

The different ways of handling exception
1. try/Catch block
     lets take we have a piece of code where we get some checked/unchecked exception, if we want to handle them we use this try catch block.
     Syntax:
      try{
         //Code which causes the checked/uncheked exception
      }catch(Exceptionclass exceptionClassReference){
           //Code that needs to execute for the exception you have catched.
      }

2. Throws
   This is the simplest way to handle your exception.
   If we want to propogate the exception from the actual implementation method, then we use throws.

   Syntax:
      public void test() throws ExceptionClassName{
        // You have piece of code that throws ExceptionClassName exception.
      }
  -> You can propogate or we can throw only checked Exceptions.

3. throw:


4. finally






Assesment:
IllegalArgumentException, NumberFormatException, - Write programs to get this exceptions.
IOException - Write program to get this exception
